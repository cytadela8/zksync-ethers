/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type VerifierParamsStruct = {
  recursionNodeLevelVkHash: BytesLike;
  recursionLeafLevelVkHash: BytesLike;
  recursionCircuitsSetVksHash: BytesLike;
};

export type VerifierParamsStructOutput = [
  recursionNodeLevelVkHash: string,
  recursionLeafLevelVkHash: string,
  recursionCircuitsSetVksHash: string
] & {
  recursionNodeLevelVkHash: string;
  recursionLeafLevelVkHash: string;
  recursionCircuitsSetVksHash: string;
};

export type PriorityOperationStruct = {
  canonicalTxHash: BytesLike;
  expirationTimestamp: BigNumberish;
  layer2Tip: BigNumberish;
};

export type PriorityOperationStructOutput = [
  canonicalTxHash: string,
  expirationTimestamp: bigint,
  layer2Tip: bigint
] & { canonicalTxHash: string; expirationTimestamp: bigint; layer2Tip: bigint };

export declare namespace IGetters {
  export type FacetStruct = { addr: AddressLike; selectors: BytesLike[] };

  export type FacetStructOutput = [addr: string, selectors: string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface IGettersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseTokenGasPriceMultiplierDenominator"
      | "baseTokenGasPriceMultiplierNominator"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getAdmin"
      | "getBaseToken"
      | "getBaseTokenBridge"
      | "getBridgehub"
      | "getFirstUnprocessedPriorityTx"
      | "getL2BootloaderBytecodeHash"
      | "getL2DefaultAccountBytecodeHash"
      | "getL2SystemContractsUpgradeBatchNumber"
      | "getL2SystemContractsUpgradeTxHash"
      | "getName"
      | "getPendingAdmin"
      | "getPriorityQueueSize"
      | "getPriorityTxMaxGasLimit"
      | "getProtocolVersion"
      | "getPubdataPricingMode"
      | "getSemverProtocolVersion"
      | "getStateTransitionManager"
      | "getTotalBatchesCommitted"
      | "getTotalBatchesExecuted"
      | "getTotalBatchesVerified"
      | "getTotalPriorityTxs"
      | "getVerifier"
      | "getVerifierParams"
      | "isDiamondStorageFrozen"
      | "isEthWithdrawalFinalized"
      | "isFacetFreezable"
      | "isFunctionFreezable"
      | "isValidator"
      | "l2LogsRootHash"
      | "priorityQueueFrontOperation"
      | "storedBatchHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "baseTokenGasPriceMultiplierDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenGasPriceMultiplierNominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgehub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubdataPricingMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSemverProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTransitionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storedBatchHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseTokenGasPriceMultiplierDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenGasPriceMultiplierNominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgehub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPubdataPricingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSemverProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTransitionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBatchHash",
    data: BytesLike
  ): Result;
}

export interface IGetters extends BaseContract {
  connect(runner?: ContractRunner | null): IGetters;
  waitForDeployment(): Promise<this>;

  interface: IGettersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseTokenGasPriceMultiplierDenominator: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  baseTokenGasPriceMultiplierNominator: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  facetAddress: TypedContractMethod<[_selector: BytesLike], [string], "view">;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IGetters.FacetStructOutput[]], "view">;

  getAdmin: TypedContractMethod<[], [string], "view">;

  getBaseToken: TypedContractMethod<[], [string], "view">;

  getBaseTokenBridge: TypedContractMethod<[], [string], "view">;

  getBridgehub: TypedContractMethod<[], [string], "view">;

  getFirstUnprocessedPriorityTx: TypedContractMethod<[], [bigint], "view">;

  getL2BootloaderBytecodeHash: TypedContractMethod<[], [string], "view">;

  getL2DefaultAccountBytecodeHash: TypedContractMethod<[], [string], "view">;

  getL2SystemContractsUpgradeBatchNumber: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getL2SystemContractsUpgradeTxHash: TypedContractMethod<[], [string], "view">;

  getName: TypedContractMethod<[], [string], "view">;

  getPendingAdmin: TypedContractMethod<[], [string], "view">;

  getPriorityQueueSize: TypedContractMethod<[], [bigint], "view">;

  getPriorityTxMaxGasLimit: TypedContractMethod<[], [bigint], "view">;

  getProtocolVersion: TypedContractMethod<[], [bigint], "view">;

  getPubdataPricingMode: TypedContractMethod<[], [bigint], "view">;

  getSemverProtocolVersion: TypedContractMethod<
    [],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getStateTransitionManager: TypedContractMethod<[], [string], "view">;

  getTotalBatchesCommitted: TypedContractMethod<[], [bigint], "view">;

  getTotalBatchesExecuted: TypedContractMethod<[], [bigint], "view">;

  getTotalBatchesVerified: TypedContractMethod<[], [bigint], "view">;

  getTotalPriorityTxs: TypedContractMethod<[], [bigint], "view">;

  getVerifier: TypedContractMethod<[], [string], "view">;

  getVerifierParams: TypedContractMethod<
    [],
    [VerifierParamsStructOutput],
    "view"
  >;

  isDiamondStorageFrozen: TypedContractMethod<[], [boolean], "view">;

  isEthWithdrawalFinalized: TypedContractMethod<
    [_l2BatchNumber: BigNumberish, _l2MessageIndex: BigNumberish],
    [boolean],
    "view"
  >;

  isFacetFreezable: TypedContractMethod<
    [_facet: AddressLike],
    [boolean],
    "view"
  >;

  isFunctionFreezable: TypedContractMethod<
    [_selector: BytesLike],
    [boolean],
    "view"
  >;

  isValidator: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  l2LogsRootHash: TypedContractMethod<
    [_batchNumber: BigNumberish],
    [string],
    "view"
  >;

  priorityQueueFrontOperation: TypedContractMethod<
    [],
    [PriorityOperationStructOutput],
    "view"
  >;

  storedBatchHash: TypedContractMethod<
    [_batchNumber: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseTokenGasPriceMultiplierDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseTokenGasPriceMultiplierNominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IGetters.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseTokenBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBridgehub"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFirstUnprocessedPriorityTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL2BootloaderBytecodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getL2DefaultAccountBytecodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getL2SystemContractsUpgradeBatchNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL2SystemContractsUpgradeTxHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriorityQueueSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorityTxMaxGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPubdataPricingMode"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSemverProtocolVersion"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getStateTransitionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBatchesCommitted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBatchesExecuted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBatchesVerified"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPriorityTxs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVerifierParams"
  ): TypedContractMethod<[], [VerifierParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "isDiamondStorageFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEthWithdrawalFinalized"
  ): TypedContractMethod<
    [_l2BatchNumber: BigNumberish, _l2MessageIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFacetFreezable"
  ): TypedContractMethod<[_facet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFunctionFreezable"
  ): TypedContractMethod<[_selector: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "l2LogsRootHash"
  ): TypedContractMethod<[_batchNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "priorityQueueFrontOperation"
  ): TypedContractMethod<[], [PriorityOperationStructOutput], "view">;
  getFunction(
    nameOrSignature: "storedBatchHash"
  ): TypedContractMethod<[_batchNumber: BigNumberish], [string], "view">;

  filters: {};
}
