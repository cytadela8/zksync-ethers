/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGettersInterface extends ethers.utils.Interface {
  functions: {
    "baseTokenGasPriceMultiplierDenominator()": FunctionFragment;
    "baseTokenGasPriceMultiplierNominator()": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getBaseToken()": FunctionFragment;
    "getBaseTokenBridge()": FunctionFragment;
    "getBridgehub()": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getL2BootloaderBytecodeHash()": FunctionFragment;
    "getL2DefaultAccountBytecodeHash()": FunctionFragment;
    "getL2SystemContractsUpgradeBatchNumber()": FunctionFragment;
    "getL2SystemContractsUpgradeTxHash()": FunctionFragment;
    "getName()": FunctionFragment;
    "getPendingAdmin()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getProtocolVersion()": FunctionFragment;
    "getPubdataPricingMode()": FunctionFragment;
    "getSemverProtocolVersion()": FunctionFragment;
    "getStateTransitionManager()": FunctionFragment;
    "getTotalBatchesCommitted()": FunctionFragment;
    "getTotalBatchesExecuted()": FunctionFragment;
    "getTotalBatchesVerified()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "getVerifierParams()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "isFacetFreezable(address)": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "storedBatchHash(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseTokenGasPriceMultiplierDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenGasPriceMultiplierNominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgehub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubdataPricingMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSemverProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTransitionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storedBatchHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseTokenGasPriceMultiplierDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenGasPriceMultiplierNominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgehub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPubdataPricingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSemverProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTransitionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBatchHash",
    data: BytesLike
  ): Result;

  events: {};
}

export class IGetters extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGettersInterface;

  functions: {
    baseTokenGasPriceMultiplierDenominator(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "baseTokenGasPriceMultiplierDenominator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    baseTokenGasPriceMultiplierNominator(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "baseTokenGasPriceMultiplierNominator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    facetAddresses(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    facets(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    "facets()"(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    getAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getBaseToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getBaseTokenBridge(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getBaseTokenBridge()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getBridgehub(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getBridgehub()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getFirstUnprocessedPriorityTx()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2DefaultAccountBytecodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getL2SystemContractsUpgradeBatchNumber(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getL2SystemContractsUpgradeBatchNumber()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2SystemContractsUpgradeTxHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPendingAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPendingAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getProtocolVersion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPubdataPricingMode(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "getPubdataPricingMode()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    getSemverProtocolVersion(overrides?: CallOverrides): Promise<{
      0: number;
      1: number;
      2: number;
    }>;

    "getSemverProtocolVersion()"(overrides?: CallOverrides): Promise<{
      0: number;
      1: number;
      2: number;
    }>;

    getStateTransitionManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getStateTransitionManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBatchesCommitted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBatchesExecuted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBatchesVerified()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVerifier(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVerifier()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getVerifierParams(overrides?: CallOverrides): Promise<{
      0: {
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
      };
    }>;

    "getVerifierParams()"(overrides?: CallOverrides): Promise<{
      0: {
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
      };
    }>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2LogsRootHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      merkleRoot: string;
      0: string;
    }>;

    "l2LogsRootHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      merkleRoot: string;
      0: string;
    }>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "priorityQueueFrontOperation()"(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    storedBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  baseTokenGasPriceMultiplierDenominator(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "baseTokenGasPriceMultiplierDenominator()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseTokenGasPriceMultiplierNominator(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "baseTokenGasPriceMultiplierNominator()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  facetAddress(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getBaseToken(overrides?: CallOverrides): Promise<string>;

  "getBaseToken()"(overrides?: CallOverrides): Promise<string>;

  getBaseTokenBridge(overrides?: CallOverrides): Promise<string>;

  "getBaseTokenBridge()"(overrides?: CallOverrides): Promise<string>;

  getBridgehub(overrides?: CallOverrides): Promise<string>;

  "getBridgehub()"(overrides?: CallOverrides): Promise<string>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  "getFirstUnprocessedPriorityTx()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

  getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "getL2DefaultAccountBytecodeHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getL2SystemContractsUpgradeBatchNumber(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getL2SystemContractsUpgradeBatchNumber()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<string>;

  "getL2SystemContractsUpgradeTxHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getPendingAdmin(overrides?: CallOverrides): Promise<string>;

  "getPendingAdmin()"(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPubdataPricingMode(overrides?: CallOverrides): Promise<number>;

  "getPubdataPricingMode()"(overrides?: CallOverrides): Promise<number>;

  getSemverProtocolVersion(overrides?: CallOverrides): Promise<{
    0: number;
    1: number;
    2: number;
  }>;

  "getSemverProtocolVersion()"(overrides?: CallOverrides): Promise<{
    0: number;
    1: number;
    2: number;
  }>;

  getStateTransitionManager(overrides?: CallOverrides): Promise<string>;

  "getStateTransitionManager()"(overrides?: CallOverrides): Promise<string>;

  getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBatchesCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBatchesExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBatchesVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  "getVerifier()"(overrides?: CallOverrides): Promise<string>;

  getVerifierParams(
    overrides?: CallOverrides
  ): Promise<{
    recursionNodeLevelVkHash: string;
    recursionLeafLevelVkHash: string;
    recursionCircuitsSetVksHash: string;
    0: string;
    1: string;
    2: string;
  }>;

  "getVerifierParams()"(
    overrides?: CallOverrides
  ): Promise<{
    recursionNodeLevelVkHash: string;
    recursionLeafLevelVkHash: string;
    recursionCircuitsSetVksHash: string;
    0: string;
    1: string;
    2: string;
  }>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

  isEthWithdrawalFinalized(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEthWithdrawalFinalized(uint256,uint256)"(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<boolean>;

  "isFacetFreezable(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionFreezable(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFunctionFreezable(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidator(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "l2LogsRootHash(uint256)"(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationTimestamp: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "priorityQueueFrontOperation()"(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationTimestamp: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  storedBatchHash(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBatchHash(uint256)"(
    _batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    baseTokenGasPriceMultiplierDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenGasPriceMultiplierDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenGasPriceMultiplierNominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenGasPriceMultiplierNominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getBaseToken(overrides?: CallOverrides): Promise<string>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<string>;

    getBaseTokenBridge(overrides?: CallOverrides): Promise<string>;

    "getBaseTokenBridge()"(overrides?: CallOverrides): Promise<string>;

    getBridgehub(overrides?: CallOverrides): Promise<string>;

    "getBridgehub()"(overrides?: CallOverrides): Promise<string>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeBatchNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<string>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getPendingAdmin(overrides?: CallOverrides): Promise<string>;

    "getPendingAdmin()"(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPubdataPricingMode(overrides?: CallOverrides): Promise<number>;

    "getPubdataPricingMode()"(overrides?: CallOverrides): Promise<number>;

    getSemverProtocolVersion(overrides?: CallOverrides): Promise<{
      0: number;
      1: number;
      2: number;
    }>;

    "getSemverProtocolVersion()"(overrides?: CallOverrides): Promise<{
      0: number;
      1: number;
      2: number;
    }>;

    getStateTransitionManager(overrides?: CallOverrides): Promise<string>;

    "getStateTransitionManager()"(overrides?: CallOverrides): Promise<string>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    "getVerifier()"(overrides?: CallOverrides): Promise<string>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<{
      recursionNodeLevelVkHash: string;
      recursionLeafLevelVkHash: string;
      recursionCircuitsSetVksHash: string;
      0: string;
      1: string;
      2: string;
    }>;

    "getVerifierParams()"(
      overrides?: CallOverrides
    ): Promise<{
      recursionNodeLevelVkHash: string;
      recursionLeafLevelVkHash: string;
      recursionCircuitsSetVksHash: string;
      0: string;
      1: string;
      2: string;
    }>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2LogsRootHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationTimestamp: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationTimestamp: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    storedBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    baseTokenGasPriceMultiplierDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenGasPriceMultiplierDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenGasPriceMultiplierNominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenGasPriceMultiplierNominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgehub(overrides?: CallOverrides): Promise<BigNumber>;

    "getBridgehub()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getL2BootloaderBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeBatchNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPubdataPricingMode(overrides?: CallOverrides): Promise<BigNumber>;

    "getPubdataPricingMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSemverProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getSemverProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStateTransitionManager(overrides?: CallOverrides): Promise<BigNumber>;

    "getStateTransitionManager()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBatchesVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifierParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifierParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2LogsRootHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storedBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseTokenGasPriceMultiplierDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseTokenGasPriceMultiplierDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenGasPriceMultiplierNominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseTokenGasPriceMultiplierNominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseTokenBridge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseTokenBridge()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgehub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBridgehub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2BootloaderBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2BootloaderBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2SystemContractsUpgradeBatchNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPendingAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityQueueSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityTxMaxGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtocolVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPubdataPricingMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPubdataPricingMode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSemverProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSemverProtocolVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateTransitionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStateTransitionManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBatchesCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBatchesExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBatchesVerified()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPriorityTxs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifierParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifierParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDiamondStorageFrozen()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2LogsRootHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storedBatchHash(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBatchHash(uint256)"(
      _batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
